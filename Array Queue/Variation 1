Variation 1

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX 10

// List holds the array and the count
typedef struct {
    int items[MAX];
    int count;
} List;

// Queue has a List plus front and rear
typedef struct {
    List list;
    int front;
    int rear;
} Queue;

// Initialize queue
Queue* initialize() {
    Queue* q = (Queue*) malloc(sizeof(Queue));
    if (!q) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    q->list.count = 0;
    q->front = -1;
    q->rear = -1;
    return q;
}

// Check if full
bool isFull(Queue* q) {
    return q->list.count == MAX;
}

// Check if empty
bool isEmpty(Queue* q) {
    return q->list.count == 0;
}

// Enqueue operation
void enqueue(Queue* q, int value) {
    if (isFull(q)) {
        printf("Queue is FULL! Cannot enqueue %d\n", value);
        return;
    }
    if (isEmpty(q)) {
        q->front = 0;
        q->rear = 0;
    } else {
        q->rear = (q->rear + 1) % MAX;
    }
    q->list.items[q->rear] = value;
    q->list.count++;
    printf("Enqueued: %d\n", value);
}

// Dequeue operation
int dequeue(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is EMPTY! Cannot dequeue.\n");
        return -1;
    }
    int value = q->list.items[q->front];
    if (q->list.count == 1) { // removing last element
        q->front = -1;
        q->rear = -1;
    } else {
        q->front = (q->front + 1) % MAX;
    }
    q->list.count--;
    printf("Dequeued: %d\n", value);
    return value;
}

// Get front element
int frontElement(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is EMPTY! No front element.\n");
        return -1;
    }
    return q->list.items[q->front];
}

// Display queue contents
void display(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is EMPTY!\n");
        return;
    }
    printf("Queue contents: ");
    int i = q->front;
    for (int j = 0; j < q->list.count; j++) {
        printf("%d ", q->list.items[i]);
        i = (i + 1) % MAX;
    }
    printf("\n");
}

// Example usage
int main() {
    Queue* q = initialize();

    enqueue(q, 1);
    enqueue(q, 3);
    enqueue(q, 2);
    enqueue(q, 5);

    display(q);

    dequeue(q);
    display(q);

    enqueue(q, 4);
    display(q);

    printf("Front element: %d\n", frontElement(q));

    return 0;
}
