#include <stdio.h>
#include <stdbool.h>

#define SIZE 8  // universe size (0–7)

typedef struct {
    bool data[SIZE];  // boolean array for membership
} Set;

void initialize(Set *set) {
    for (int i = 0; i < SIZE; i++) {
        set->data[i] = false;
    }
}

void insert(Set *set, int element) {
    if (element < 0 || element >= SIZE) return;
    set->data[element] = true;
}

void delete(Set *set, int element) {
    if (element < 0 || element >= SIZE) return;
    set->data[element] = false;
}

bool find(Set set, int element) {
    if (element < 0 || element >= SIZE) return false;
    return set.data[element];
}

void set_union(Set A, Set B, Set *C) {
    for (int i = 0; i < SIZE; i++) {
        C->data[i] = A.data[i] || B.data[i];
    }
}

void set_intersection(Set A, Set B, Set *C) {
    for (int i = 0; i < SIZE; i++) {
        C->data[i] = A.data[i] && B.data[i];
    }
}

void set_difference(Set A, Set B, Set *C) {
    for (int i = 0; i < SIZE; i++) {
        C->data[i] = A.data[i] && !B.data[i];
    }
}

void display(Set set) {
    printf("{ ");
    for (int i = 0; i < SIZE; i++) {
        if (set.data[i]) {
            printf("%d ", i);
        }
    }
    printf("}\n");
}

int main() {
    Set A, B, C;

    initialize(&A);
    initialize(&B);

    insert(&A, 0);
    insert(&A, 2);
    insert(&A, 7);

    insert(&B, 2);
    insert(&B, 4);
    insert(&B, 5);

    printf("Set A = ");
    display(A);

    printf("Set B = ");
    display(B);

    set_union(A, B, &C);
    printf("Union (A ∪ B) = ");
    display(C);

    set_intersection(A, B, &C);
    printf("Intersection (A ∩ B) = ");
    display(C);

    set_difference(A, B, &C);
    printf("Difference (A - B) = ");
    display(C);

    return 0;
}
