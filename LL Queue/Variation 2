#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

typedef struct {
    Node* front; // last node
    Node* rear;  // first node
} Queue;

// Initialize queue
Queue* initialize() {
    Queue* q = (Queue*) malloc(sizeof(Queue));
    q->front = q->rear = NULL;
    return q;
}

bool isEmpty(Queue* q) {
    return q->rear == NULL;
}

// Enqueue (insert at rear/first)
void enqueue(Queue* q, int value) {
    Node* newNode = (Node*) malloc(sizeof(Node));
    newNode->data = value;
    newNode->next = q->rear;

    q->rear = newNode;

    if (q->front == NULL) {
        q->front = newNode; // first element
    }
}

// Dequeue (remove from front/last)
int dequeue(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
        return -1;
    }

    Node* current = q->rear;
    Node* prev = NULL;

    // traverse until last node (front)
    while (current->next != NULL) {
        prev = current;
        current = current->next;
    }

    int value = current->data;

    if (prev == NULL) {
        // only one element
        q->rear = q->front = NULL;
    } else {
        prev->next = NULL;
        q->front = prev;
    }

    free(current);
    return value;
}

int front(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
        return -1;
    }
    return q->front->data;
}

void display(Queue* q) {
    Node* temp = q->rear;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    Queue* q = initialize();

    enqueue(q, 1);
    enqueue(q, 3);
    enqueue(q, 5);
    display(q);

    enqueue(q, 4);
    display(q);

    printf("Dequeued: %d\n", dequeue(q));
    display(q);

    return 0;
}
